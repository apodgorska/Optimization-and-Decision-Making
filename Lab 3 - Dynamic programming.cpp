// Lab 3 - Dynamic programming
// Made by: Aleksandra Podgórska and Szymon Siąkała
// Mk 2
// Group C
// Section 2

#include <iostream>
#include <sstream>
#include <windows.h>

std::string prd(float x)
{
    std::stringstream ss;
    ss << std::fixed << std::right;
    ss.fill(' ');
    ss.width(12);
    ss.precision(0);
    ss << x;
    return ss.str();
}

std::string center_txt(std::string s)
{
    std::stringstream ss, spaces;
    int padding = 12 - s.size();
    for (int i = 0; i < padding / 2; ++i)
    {
        spaces << " ";
    }
    ss << spaces.str() << s << spaces.str();
    if (padding > 0 && padding % 2 != 0)
    {
        ss << " ";
    }
    return ss.str();
}

template <typename TwoD>
void display_table(TwoD table, int rows, int columns)
{
    std::cout << "Profits generated by companies after capital allocation:" << std::endl;
    std::cout << std::endl;
    std::cout << center_txt("$\\Company");
    for (int i = 0; i < columns; i++)
    {
        std::cout << " | " << prd(i);
    }
    std::cout << std::endl;
    for (int i = 0; i <= columns; i++)
    {
        std::cout << "---------------";
    }
    std::cout << std::endl;
    for (int i = 0; i < rows; i++)
    {
        std::cout << prd(50 * i) << " | ";
        for (int j = 0; j < columns; j++)
        {
            std::cout << prd(table[i][j]);
            if (j + 1 != columns)
            {
                std::cout << " | ";
            }
        }
        std::cout << std::endl;
    }
    std::cout << std::endl;
}

void display_solution(int solution[], int columns)
{
    std::cout << std::endl;
    std::cout << center_txt("Company");
    for (int i = 0; i < columns; i++)
    {
        std::cout << " | " << prd(i);
    }
    std::cout << std::endl;
    for (int i = 0; i <= columns; i++)
    {
        std::cout << "---------------";
    }
    std::cout << std::endl;
    std::cout << center_txt("Capital");
    for (int i = 0; i < columns; i++)
    {
        std::cout << " | " << prd(solution[i]);
    }
    std::cout << std::endl << std::endl;
}

template <typename TwoD>
void Dynamic_programming_method(TwoD table, int rows, int columns)
{
    display_table(table, rows, columns);
    int*** tables = new int** [columns];
    for (int i = 0; i < columns; i++)
    {
        tables[i] = new int* [rows];
        for (int j = 0; j < rows; j++)
        {
            tables[i][j] = new int[4];
        }
    }
    for (int i = 0; i < columns; i++)
    {
        for (int j = 0; j < rows; j++)
        {
            tables[i][j][0] = 50 * (rows - j - 1);
            tables[i][j][1] = 50 * j;
            tables[i][j][2] = table[j][columns - 1 - i];
        }
    }
    int factorial = 0;
    for (int i = 1; i <= rows; i++)
    {
        factorial += i;
    }
    int** temp = new int* [factorial];
    for (int i = 0; i < factorial; i++)
    {
        temp[i] = new int[6];
    }
    for (int it = 0; it < columns - 1; it++)
    {
        factorial = 1;
        int x = -1;
        int y;
        int max;
        int z = 0;
        for (int i = 1; i <= rows; i++)
        {
            y = i;
            max = -1;
            for (int j = 0; j < i; j++)
            {
                x++;
                temp[x][0] = 50 * (rows - i);
                temp[x][1] = 50 * (y - 1);
                temp[x][2] = table[y - 1][columns - 2 - it];
                temp[x][3] = 50 * (rows - j - 1);
                temp[x][4] = tables[it][j][2];
                temp[x][5] = temp[x][2] + temp[x][4];
                if (max < temp[x][5])
                {
                    tables[it + 1][z][1] = temp[x][1];
                    tables[it + 1][z][2] = temp[x][5];
                    tables[it + 1][z][3] = temp[x][3];
                    max = temp[x][5];
                }
                y--;
            }
            z++;
        }
        factorial = 0;
        for (int i = 1; i <= rows; i++)
        {
            factorial += i;
        }
    }
    std::cout << "The maximum profit generated by companies after capital allocation: " << tables[columns - 1][rows - 1][2] << std::endl;
    std::cout << "Capital allocated in every company: " << std::endl;
    int* solution = new int[columns];
    solution[0] = tables[columns - 1][rows - 1][1];
    int previous = tables[columns - 1][rows - 1][3];
    int r = 1;
    for (int i = columns - 2; i >= 0; i--)
    {
        for (int j = 0; j < rows - 1; j++)
        {
            if (tables[i][j][0] == previous)
            {
                previous = tables[i][j][3];
                solution[r] = tables[i][j][1];
                r++;
            }
        }
    }
    display_solution(solution, columns);
    delete[] solution;
    factorial = 0;
    for (int i = 1; i <= rows; i++)
    {
        factorial += i;
    }
    for (int i = 0; i < factorial; i++)
    {
        delete[] temp[i];
    }
    delete[] temp;
    for (int i = 0; i < columns; i++)
    {
        for (int j = 0; j < rows; j++)
        {
            delete[] tables[i][j];
        }
        delete[] tables[i];
    }
    delete[] tables;
}

int main()
{
    int table1[7][5] = { {0,0,0,0,0},{10,15,40,20,10},{20,20,40,25,10},{25,30,40,30,30},{26,35,45,35,35},{40,35,45,40,50},{45,35,45,45,55} };
    Dynamic_programming_method(table1, sizeof table1 / sizeof table1[0], sizeof table1[0] / sizeof(int));
    system("pause");
    system("cls");
    int table2[8][3] = { {0,0,0},{4,5,9},{2,7,8},{5,3,1},{4,5,9},{8,6,2},{1,9,8},{3,3,3} };
    Dynamic_programming_method(table2, sizeof table2 / sizeof table2[0], sizeof table2[0] / sizeof(int));
    system("pause");
    system("cls");
    int table3[7][4] = { {0,0,0,0},{16,10,15,20},{16,30,30,20},{17,30,35,30},{18,35,35,35},{20,40,45,45},{40,45,50,55} };
    Dynamic_programming_method(table3, sizeof table3 / sizeof table3[0], sizeof table3[0] / sizeof(int));
    system("pause");
    system("cls");
    return 0;
}